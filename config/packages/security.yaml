security:
    encoders:
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            lazy: true
            provider: app_user_provider
            guard:
                authenticators:
                    - App\Security\CustomAuthenticator
            logout:
                path: app_logout
                target: app_logout_message
            
                # where to redirect after logout
                # target: app_any_route
            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 259200 # 1 week in seconds
                path:     /
                
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:

        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/logout_message, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        #####################################################################
        # role 'superadmin' can create 'user' and 'admin'
        - { path: ^/register, roles: ROLE_SUPERADMIN }

       

        ######################################################################
        # Admin area for the roles 'user' (simple users), 'admin' (powerfull users)
        # and 'superadmin' (database administrator) 
        - { path: ^/admin, roles: ROLE_USER }
        - { path: ^/api/admin, roles: ROLE_USER }

        ######################################################################
        # role 'admin' and 'superadmin' can see the list of th users and can modify 
        # globalsettings of the application
        - { path: ^/admin/settings, roles: [ROLE_ADMIN, ROLE_SUPERADMIN] }

        ######################################################################
        # the homepage has an access control because it's a portofolio project
        - { path: ^/, roles: ROLE_USER }
        

        
